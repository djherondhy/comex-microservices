
services:
  rabbitmq-service:
    image: rabbitmq:4.0.3-management
    hostname: rabbitmq-service
    container_name: rabbitmq-service
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - comex-service-bridge
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  postgres:
    image: postgres:16.4
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=postgres
    networks:
      - comex-service-bridge
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - postgres-data:/var/lib/postgresql/data
 
  pedido-service:
    build:
      context: ./PedidoService
      dockerfile: Dockerfile
    container_name: pedido-service
    ports:
      - "8082:8080"
    depends_on:
      rabbitmq-service:
        condition: service_healthy
        restart: true
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - comex-service-bridge
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082 || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  estoque-service:
    build:
      context: ./EstoqueService
      dockerfile: Dockerfile
    container_name: estoque-service
    ports:
      - "8081:8080"
    depends_on:
      rabbitmq-service:
        condition: service_healthy
        restart: true
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - comex-service-bridge
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081 || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

networks:
  comex-service-bridge:
    driver: bridge

volumes:
  postgres-data:

